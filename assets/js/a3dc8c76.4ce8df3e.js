"use strict";(self.webpackChunktutos=self.webpackChunktutos||[]).push([[8876],{706:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=t(4848),s=t(8453);const i={},r=void 0,l={id:"java/streams",title:"streams",description:"Java Stream API, introduced in Java 8, provides a functional approach to processing collections of elements. It enables you to express complex data processing operations using a fluent and declarative syntax. Here are some examples demonstrating the use of Java Stream API:",source:"@site/docs/java/streams.md",sourceDirName:"java",slug:"/java/streams",permalink:"/docs/java/streams",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/java/streams.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"nosql",permalink:"/docs/java/nosql"},next:{title:"tests",permalink:"/docs/java/tests"}},o={},c=[{value:"1. Filtering Elements:",id:"1-filtering-elements",level:3},{value:"2. Mapping Elements:",id:"2-mapping-elements",level:3},{value:"3. Sorting Elements:",id:"3-sorting-elements",level:3},{value:"4. Reducing Elements:",id:"4-reducing-elements",level:3},{value:"5. Stream Pipeline:",id:"5-stream-pipeline",level:3}];function m(e){const n={code:"code",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.p,{children:"Java Stream API, introduced in Java 8, provides a functional approach to processing collections of elements. It enables you to express complex data processing operations using a fluent and declarative syntax. Here are some examples demonstrating the use of Java Stream API:"}),"\n",(0,a.jsx)(n.h3,{id:"1-filtering-elements",children:"1. Filtering Elements:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'import java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<String> names = Arrays.asList("John", "Alice", "Bob", "Charlie", "David");\n\n        List<String> filteredNames = names.stream()\n                                         .filter(name -> name.startsWith("A"))\n                                         .collect(Collectors.toList());\n\n        System.out.println(filteredNames); // Output: [Alice]\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"2-mapping-elements",children:"2. Mapping Elements:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'import java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<String> names = Arrays.asList("John", "Alice", "Bob", "Charlie", "David");\n\n        List<String> upperCaseNames = names.stream()\n                                          .map(String::toUpperCase)\n                                          .collect(Collectors.toList());\n\n        System.out.println(upperCaseNames); // Output: [JOHN, ALICE, BOB, CHARLIE, DAVID]\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"3-sorting-elements",children:"3. Sorting Elements:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'import java.util.Arrays;\nimport java.util.List;\nimport java.util.stream.Collectors;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<String> names = Arrays.asList("John", "Alice", "Bob", "Charlie", "David");\n\n        List<String> sortedNames = names.stream()\n                                       .sorted()\n                                       .collect(Collectors.toList());\n\n        System.out.println(sortedNames); // Output: [Alice, Bob, Charlie, David, John]\n    }\n}\n'})}),"\n",(0,a.jsx)(n.h3,{id:"4-reducing-elements",children:"4. Reducing Elements:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:"import java.util.Arrays;\nimport java.util.List;\nimport java.util.Optional;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<Integer> numbers = Arrays.asList(1, 2, 3, 4, 5);\n\n        Optional<Integer> sum = numbers.stream()\n                                       .reduce((a, b) -> a + b);\n\n        sum.ifPresent(System.out::println); // Output: 15\n    }\n}\n"})}),"\n",(0,a.jsx)(n.h3,{id:"5-stream-pipeline",children:"5. Stream Pipeline:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-java",children:'import java.util.Arrays;\nimport java.util.List;\n\npublic class Main {\n    public static void main(String[] args) {\n        List<String> names = Arrays.asList("John", "Alice", "Bob", "Charlie", "David");\n\n        long count = names.stream()\n                         .filter(name -> name.length() > 4)\n                         .map(String::toUpperCase)\n                         .sorted()\n                         .count();\n\n        System.out.println(count); // Output: 3\n    }\n}\n'})}),"\n",(0,a.jsx)(n.p,{children:"These examples showcase some of the basic functionalities provided by the Java Stream API, such as filtering, mapping, sorting, reducing, and creating stream pipelines. The Stream API simplifies the processing of collections by providing a fluent and concise way to express data manipulation operations."})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(m,{...e})}):m(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>l});var a=t(6540);const s={},i=a.createContext(s);function r(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);