"use strict";(self.webpackChunktutos=self.webpackChunktutos||[]).push([[4570],{7637:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>p,frontMatter:()=>s,metadata:()=>r,toc:()=>l});var a=i(4848),t=i(8453);const s={},o=void 0,r={id:"craftsmanChip/clean-code",title:"clean-code",description:"Writing clean code is essential for maintainability, readability, and collaboration within a software project. Clean code is easy to understand, easy to change, and easy to extend. Here are some principles and examples of clean code in Java:",source:"@site/docs/craftsmanChip/clean-code.md",sourceDirName:"craftsmanChip",slug:"/craftsmanChip/clean-code",permalink:"/tutos/docs/craftsmanChip/clean-code",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/craftsmanChip/clean-code.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"crafsmanChip",permalink:"/tutos/docs/category/crafsmanchip"},next:{title:"gitflow",permalink:"/tutos/docs/craftsmanChip/gitflow"}},c={},l=[{value:"1. Descriptive Naming:",id:"1-descriptive-naming",level:3},{value:"2. Avoid Magic Numbers and Strings:",id:"2-avoid-magic-numbers-and-strings",level:3},{value:"3. Proper Formatting:",id:"3-proper-formatting",level:3},{value:"4. Single Responsibility Principle (SRP):",id:"4-single-responsibility-principle-srp",level:3},{value:"5. Avoid Deep Nesting:",id:"5-avoid-deep-nesting",level:3},{value:"6. Comments:",id:"6-comments",level:3},{value:"7. Unit Testing:",id:"7-unit-testing",level:3},{value:"8. Use Java Naming Conventions:",id:"8-use-java-naming-conventions",level:3}];function d(n){const e={code:"code",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.p,{children:"Writing clean code is essential for maintainability, readability, and collaboration within a software project. Clean code is easy to understand, easy to change, and easy to extend. Here are some principles and examples of clean code in Java:"}),"\n",(0,a.jsx)(e.h3,{id:"1-descriptive-naming",children:"1. Descriptive Naming:"}),"\n",(0,a.jsx)(e.p,{children:"Use meaningful names for variables, methods, classes, and packages."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:"// Bad naming\nint d; // elapsed time in days\n\n// Good naming\nint elapsedTimeInDays;\n"})}),"\n",(0,a.jsx)(e.h3,{id:"2-avoid-magic-numbers-and-strings",children:"2. Avoid Magic Numbers and Strings:"}),"\n",(0,a.jsx)(e.p,{children:"Avoid hardcoding constants in your code. Use named constants or enums instead."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:"// Bad\nif (employee.getRole() == 1) {\n    // do something\n}\n\n// Good\nif (employee.getRole() == Role.MANAGER) {\n    // do something\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"3-proper-formatting",children:"3. Proper Formatting:"}),"\n",(0,a.jsx)(e.p,{children:"Use consistent and readable formatting conventions."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:'// Bad formatting\npublic void foo(){\nint x=5;\nif(x==5){\nSystem.out.println("x is 5");}\n}\n\n// Good formatting\npublic void foo() {\n    int x = 5;\n    if (x == 5) {\n        System.out.println("x is 5");\n    }\n}\n'})}),"\n",(0,a.jsx)(e.h3,{id:"4-single-responsibility-principle-srp",children:"4. Single Responsibility Principle (SRP):"}),"\n",(0,a.jsx)(e.p,{children:"Each class or method should have a single responsibility."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:"// Bad\npublic class Utility {\n    public void processEmployeeData() {\n        // ...\n    }\n\n    public void generateReport() {\n        // ...\n    }\n}\n\n// Good\npublic class EmployeeDataProcessor {\n    public void processEmployeeData() {\n        // ...\n    }\n}\n\npublic class ReportGenerator {\n    public void generateReport() {\n        // ...\n    }\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"5-avoid-deep-nesting",children:"5. Avoid Deep Nesting:"}),"\n",(0,a.jsx)(e.p,{children:"Limit the levels of nesting in your code to improve readability."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:"// Bad\nif (condition1) {\n    if (condition2) {\n        if (condition3) {\n            // ...\n        }\n    }\n}\n\n// Good\nif (condition1 && condition2 && condition3) {\n    // ...\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"6-comments",children:"6. Comments:"}),"\n",(0,a.jsx)(e.p,{children:"Use comments to explain why something is being done if the code isn't self-explanatory."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:"// Bad\n// Increment x by 1\nx++;\n\n// Good\nx++; // Increment x to indicate progress\n"})}),"\n",(0,a.jsx)(e.h3,{id:"7-unit-testing",children:"7. Unit Testing:"}),"\n",(0,a.jsx)(e.p,{children:"Write unit tests to verify the behavior of your code."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:"// Bad: No unit test\npublic int add(int a, int b) {\n    return a + b;\n}\n\n// Good: With unit test\npublic int add(int a, int b) {\n    return a + b;\n}\n\n@Test\npublic void testAdd() {\n    assertEquals(5, add(2, 3));\n}\n"})}),"\n",(0,a.jsx)(e.h3,{id:"8-use-java-naming-conventions",children:"8. Use Java Naming Conventions:"}),"\n",(0,a.jsx)(e.p,{children:"Follow Java naming conventions to maintain consistency."}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsx)(e.li,{children:"Class names should start with an uppercase letter."}),"\n",(0,a.jsx)(e.li,{children:"Method and variable names should start with a lowercase letter."}),"\n"]}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-java",children:"// Bad\nclass car {\n\n    void Drive_car() {\n        // ...\n    }\n}\n\n// Good\nclass Car {\n\n    void driveCar() {\n        // ...\n    }\n}\n"})}),"\n",(0,a.jsx)(e.p,{children:"By following these clean code principles, you can write Java code that is more maintainable, readable, and easy to work with, ultimately leading to more robust and efficient software development."})]})}function p(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(d,{...n})}):d(n)}},8453:(n,e,i)=>{i.d(e,{R:()=>o,x:()=>r});var a=i(6540);const t={},s=a.createContext(t);function o(n){const e=a.useContext(s);return a.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function r(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(t):n.components||t:o(n.components),a.createElement(s.Provider,{value:e},n.children)}}}]);