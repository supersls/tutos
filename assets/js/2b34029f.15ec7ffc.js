"use strict";(self.webpackChunktutos=self.webpackChunktutos||[]).push([[3729],{5337:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>c,frontMatter:()=>a,metadata:()=>h,toc:()=>o});var s=t(4848),i=t(8453);const a={},r=void 0,h={id:"java/hashmap",title:"hashmap",description:"Sure, here's the explanation formatted in Markdown:",source:"@site/docs/java/hashmap.md",sourceDirName:"java",slug:"/java/hashmap",permalink:"/tutos/docs/java/hashmap",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/java/hashmap.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"hashcode-equals",permalink:"/tutos/docs/java/hashcode-equals"},next:{title:"hashset",permalink:"/tutos/docs/java/hashset"}},l={},o=[{value:"How a Hashmap Works Internally",id:"how-a-hashmap-works-internally",level:3}];function d(e){const n={h3:"h3",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Sure, here's the explanation formatted in Markdown:"}),"\n",(0,s.jsx)(n.h3,{id:"how-a-hashmap-works-internally",children:"How a Hashmap Works Internally"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Hashing"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"When you insert a key-value pair into a hashmap, the hashmap computes the hash code of the key. The hash code is typically an integer value."}),"\n",(0,s.jsx)(n.li,{children:"The hash code is used to determine the index or bucket where the key-value pair will be stored in the underlying array."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Index Calculation"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"The hash code is often too large to be directly used as an index, so it is mapped to a valid index within the array using a process called modulo operation."}),"\n",(0,s.jsx)(n.li,{children:"The modulo operation involves taking the hash code modulo the size of the array (the number of buckets)."}),"\n",(0,s.jsx)(n.li,{children:"This calculated index is where the key-value pair will be stored in the array."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Handling Collisions"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Collisions occur when two different keys produce the same hash code or when their hash codes map to the same index."}),"\n",(0,s.jsxs)(n.li,{children:["To handle collisions, most hashmaps use a technique called chaining or open addressing.","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Chaining"}),": Each bucket in the array contains a linked list (or some other data structure) of key-value pairs that hash to the same index."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Open Addressing"}),": If a collision occurs, the hashmap looks for the next available slot (using probing techniques) until an empty slot is found."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Insertion"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"When inserting a new key-value pair, the hashmap first computes the hash code of the key."}),"\n",(0,s.jsx)(n.li,{children:"It then calculates the index where the key-value pair will be stored."}),"\n",(0,s.jsx)(n.li,{children:"If the bucket at that index is empty, the key-value pair is stored directly."}),"\n",(0,s.jsx)(n.li,{children:"If the bucket is not empty due to a collision, the key-value pair is added to the existing data structure (linked list or next available slot)."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Retrieval"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"To retrieve a value associated with a key, the hashmap first computes the hash code of the key."}),"\n",(0,s.jsx)(n.li,{children:"It then calculates the index where the key-value pair is expected to be stored."}),"\n",(0,s.jsx)(n.li,{children:"If the bucket at that index is not empty, it searches through the data structure (linked list or probing) to find the key-value pair with the matching key."}),"\n",(0,s.jsx)(n.li,{children:"If the key is found, the corresponding value is returned."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Removal"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"To remove a key-value pair, the hashmap first computes the hash code of the key and calculates the index."}),"\n",(0,s.jsx)(n.li,{children:"If the bucket at that index is not empty, it searches for the key-value pair to be removed."}),"\n",(0,s.jsx)(n.li,{children:"If found, the pair is removed from the data structure."}),"\n",(0,s.jsx)(n.li,{children:"If the bucket becomes empty after removal, it may be left empty or marked as deleted depending on the implementation."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Resize"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"As the number of key-value pairs grows, the hashmap may become too full, leading to performance degradation."}),"\n",(0,s.jsx)(n.li,{children:"To avoid this, the hashmap periodically resizes its internal array (rehashing)."}),"\n",(0,s.jsx)(n.li,{children:"During resizing, a new, larger array is created, and all existing key-value pairs are reinserted into the new array based on their new hash codes."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This is a high-level overview of how a hashmap works internally. The actual implementation details may vary depending on the programming language and the hashmap implementation being used."})]})}function c(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>h});var s=t(6540);const i={},a=s.createContext(i);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function h(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);