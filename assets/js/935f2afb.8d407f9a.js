"use strict";(self.webpackChunktutos=self.webpackChunktutos||[]).push([[8581],{5610:a=>{a.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"category","label":"crafsmanChip","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"DDD","href":"/docs/craftsmanChip/DDD","docId":"craftsmanChip/DDD","unlisted":false},{"type":"link","label":"clean-code","href":"/docs/craftsmanChip/clean-code","docId":"craftsmanChip/clean-code","unlisted":false},{"type":"link","label":"gitflow","href":"/docs/craftsmanChip/gitflow","docId":"craftsmanChip/gitflow","unlisted":false}],"href":"/docs/category/crafsmanchip"},{"type":"link","label":"Tutorial Intro","href":"/docs/intro","docId":"intro","unlisted":false},{"type":"category","label":"Java","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"DDD","href":"/docs/java/DDD","docId":"java/DDD","unlisted":false},{"type":"link","label":"collections","href":"/docs/java/collections","docId":"java/collections","unlisted":false},{"type":"link","label":"futures","href":"/docs/java/futures","docId":"java/futures","unlisted":false},{"type":"link","label":"gradle","href":"/docs/java/gradle","docId":"java/gradle","unlisted":false},{"type":"link","label":"hashcode-equals","href":"/docs/java/hashcode-equals","docId":"java/hashcode-equals","unlisted":false},{"type":"link","label":"hashmap","href":"/docs/java/hashmap","docId":"java/hashmap","unlisted":false},{"type":"link","label":"hashset","href":"/docs/java/hashset","docId":"java/hashset","unlisted":false},{"type":"link","label":"log4j","href":"/docs/java/log4j","docId":"java/log4j","unlisted":false},{"type":"link","label":"nosql","href":"/docs/java/nosql","docId":"java/nosql","unlisted":false},{"type":"link","label":"streams","href":"/docs/java/streams","docId":"java/streams","unlisted":false},{"type":"link","label":"tests","href":"/docs/java/tests","docId":"java/tests","unlisted":false},{"type":"link","label":"threads","href":"/docs/java/threads","docId":"java/threads","unlisted":false}],"href":"/docs/category/java"},{"type":"category","label":"Spring","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"spring-data-jdbc","href":"/docs/spring/spring-data-jdbc","docId":"spring/spring-data-jdbc","unlisted":false},{"type":"link","label":"spring-data-jpa","href":"/docs/spring/spring-data-jpa","docId":"spring/spring-data-jpa","unlisted":false},{"type":"link","label":"spring-security-jwt","href":"/docs/spring/spring-security-jwt","docId":"spring/spring-security-jwt","unlisted":false}],"href":"/docs/category/spring"}]},"docs":{"craftsmanChip/clean-code":{"id":"craftsmanChip/clean-code","title":"clean-code","description":"Writing clean code is essential for maintainability, readability, and collaboration within a software project. Clean code is easy to understand, easy to change, and easy to extend. Here are some principles and examples of clean code in Java:","sidebar":"tutorialSidebar"},"craftsmanChip/DDD":{"id":"craftsmanChip/DDD","title":"DDD","description":"Domain-Driven Design (DDD) is an architectural approach that emphasizes the importance of the domain model within a software application. It focuses on understanding and modeling the business domain, capturing its complexity, and mapping it to the software implementation effectively. Here\'s a simplified example of Domain-Driven Design in a Java application:","sidebar":"tutorialSidebar"},"craftsmanChip/gitflow":{"id":"craftsmanChip/gitflow","title":"gitflow","description":"The Gitflow model is a popular branching strategy used in software development projects, including Java applications. It provides a structured approach to managing code changes, releases, and collaboration among team members. Here\'s how you can adapt the Gitflow model for Java projects:","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Tutorial Intro","description":"Let\'s discover Docusaurus in less than 5 minutes.","sidebar":"tutorialSidebar"},"java/collections":{"id":"java/collections","title":"collections","description":"Java Collections Framework provides a set of interfaces and classes to represent and manipulate collections of objects. It includes various data structures like Lists, Sets, Maps, Queues, etc., along with algorithms to manipulate them efficiently. Here are some key interfaces and classes in the Java Collections Framework:","sidebar":"tutorialSidebar"},"java/DDD":{"id":"java/DDD","title":"DDD","description":"Domain-Driven Design (DDD) is an architectural approach that emphasizes the importance of the domain model within a software application. It focuses on understanding and modeling the business domain, capturing its complexity, and mapping it to the software implementation effectively. Here\'s a simplified example of Domain-Driven Design in a Java application:","sidebar":"tutorialSidebar"},"java/futures":{"id":"java/futures","title":"futures","description":"Java CompletableFuture is a class introduced in Java 8 to represent a future result of an asynchronous computation. It provides a way to write non-blocking asynchronous code in a more readable and maintainable way. Here are some examples of using CompletableFuture in Java:","sidebar":"tutorialSidebar"},"java/gradle":{"id":"java/gradle","title":"gradle","description":"In Gradle, packaging refers to the process of bundling your Java application, along with its dependencies and resources, into a distributable format, such as a JAR (Java Archive) or a WAR (Web Archive) file. Gradle offers powerful capabilities for packaging Java projects efficiently. Here are the basic steps for packaging a Java project with Gradle:","sidebar":"tutorialSidebar"},"java/hashcode-equals":{"id":"java/hashcode-equals","title":"hashcode-equals","description":"In Java, hashCode() and equals() are methods defined in the Object class, which is the root class for all Java classes. They are crucial for proper functioning in collections like HashMap, HashSet, Hashtable, etc. Understanding their rules and implementing them correctly is essential for designing effective Java classes.","sidebar":"tutorialSidebar"},"java/hashmap":{"id":"java/hashmap","title":"hashmap","description":"Sure, here\'s the explanation formatted in Markdown:","sidebar":"tutorialSidebar"},"java/hashset":{"id":"java/hashset","title":"hashset","description":"Certainly! Below is an explanation of the HashSet implementation in Java, formatted in Markdown:","sidebar":"tutorialSidebar"},"java/log4j":{"id":"java/log4j","title":"log4j","description":"Log4j is a logging library for Java applications that allows developers to log messages across various levels of severity, manage logging configurations, and control the output destination of log messages. Here\'s how Log4j works:","sidebar":"tutorialSidebar"},"java/nosql":{"id":"java/nosql","title":"nosql","description":"NoSQL databases are a category of databases that provide mechanisms for storage and retrieval of data models other than the tabular relations used in relational databases. They are designed to handle large volumes of data, support flexible schemas, and provide horizontal scalability. Here are some key principles of NoSQL databases:","sidebar":"tutorialSidebar"},"java/streams":{"id":"java/streams","title":"streams","description":"Java Stream API, introduced in Java 8, provides a functional approach to processing collections of elements. It enables you to express complex data processing operations using a fluent and declarative syntax. Here are some examples demonstrating the use of Java Stream API:","sidebar":"tutorialSidebar"},"java/tests":{"id":"java/tests","title":"tests","description":"In Java application development, various types of tests are commonly used to ensure the quality, correctness, and reliability of the software. Here are some of the most common types of tests used in Java applications:","sidebar":"tutorialSidebar"},"java/threads":{"id":"java/threads","title":"threads","description":"Threads in Java allow concurrent execution of tasks, enabling applications to perform multiple operations simultaneously. Each thread represents a separate flow of control within a program. Here\'s an explanation of Java threads with examples:","sidebar":"tutorialSidebar"},"spring/spring-data-jdbc":{"id":"spring/spring-data-jdbc","title":"spring-data-jdbc","description":"Certainly! Below is a basic example of using Spring Data JDBC, formatted in Markdown:","sidebar":"tutorialSidebar"},"spring/spring-data-jpa":{"id":"spring/spring-data-jpa","title":"spring-data-jpa","description":"Certainly! Here\'s a basic example of using Spring Data JPA, formatted in Markdown:","sidebar":"tutorialSidebar"},"spring/spring-security-jwt":{"id":"spring/spring-security-jwt","title":"spring-security-jwt","description":"Spring Security offers extensive support for integrating JSON Web Tokens (JWT) into your application for authentication and authorization purposes. Here\'s a basic example of using JWT with Spring Security:","sidebar":"tutorialSidebar"}}}')}}]);