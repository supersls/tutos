"use strict";(self.webpackChunktutos=self.webpackChunktutos||[]).push([[611],{9029:(e,a,o)=>{o.r(a),o.d(a,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>n,metadata:()=>c,toc:()=>l});var t=o(4848),r=o(8453);const n={},i=void 0,c={id:"java/gc",title:"gc",description:"Java's garbage collector (GC) is a critical component of the Java Virtual Machine (JVM) responsible for automatically managing memory allocation and deallocation in Java applications. Here's an overview of how the Java garbage collector works:",source:"@site/docs/java/gc.md",sourceDirName:"java",slug:"/java/gc",permalink:"/tutos/docs/java/gc",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/java/gc.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"futures",permalink:"/tutos/docs/java/futures"},next:{title:"gradle",permalink:"/tutos/docs/java/gradle"}},s={},l=[];function d(e){const a={code:"code",li:"li",ol:"ol",p:"p",strong:"strong",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.p,{children:"Java's garbage collector (GC) is a critical component of the Java Virtual Machine (JVM) responsible for automatically managing memory allocation and deallocation in Java applications. Here's an overview of how the Java garbage collector works:"}),"\n",(0,t.jsxs)(a.ol,{children:["\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Memory Allocation"}),": When you create objects in Java using the ",(0,t.jsx)(a.code,{children:"new"})," keyword, memory is allocated from the heap, which is a region of memory managed by the JVM."]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Reference Tracking"}),': The Java garbage collector uses a concept called "reachability" to determine which objects are still in use and which can be reclaimed. It starts by assuming that all objects in memory are unreachable and eligible for garbage collection.']}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Root Set"}),": The root set consists of objects that are directly accessible by the application code, such as local variables, static variables, and active threads. The garbage collector starts tracing from these root objects to find reachable objects."]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Marking Phase"}),": During the marking phase, the garbage collector traverses object references starting from the root set and marks objects that are reachable. It uses algorithms like mark-and-sweep or mark-and-compact to identify and mark reachable objects."]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Sweeping Phase"}),": In the sweeping phase, the garbage collector identifies and reclaims memory occupied by unreachable objects. It deallocates memory from objects that are not marked as reachable and returns it to the heap for future allocations."]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Compaction (optional)"}),": Some garbage collectors perform compaction after reclaiming memory to reduce fragmentation in the heap. Compaction involves moving live objects closer together to create larger contiguous blocks of free memory."]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Finalization (optional)"}),": In some cases, objects may need to perform cleanup operations before they are garbage collected. Java provides a mechanism called finalization, where objects can override the ",(0,t.jsx)(a.code,{children:"finalize()"})," method to perform cleanup tasks before being reclaimed by the garbage collector."]}),"\n",(0,t.jsxs)(a.li,{children:[(0,t.jsx)(a.strong,{children:"Tuning and Optimization"}),": Java offers various garbage collection algorithms and options that can be configured to optimize performance and memory usage based on the characteristics of the application. These options include different garbage collector implementations like Serial, Parallel, CMS (Concurrent Mark-Sweep), G1 (Garbage-First), and ZGC (Z Garbage Collector)."]}),"\n"]}),"\n",(0,t.jsx)(a.p,{children:"Overall, the Java garbage collector automates memory management in Java applications, allowing developers to focus on application logic without worrying about manual memory deallocation and memory leaks. However, understanding garbage collection behavior and tuning options is essential for optimizing application performance and avoiding performance bottlenecks."})]})}function m(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,a,o)=>{o.d(a,{R:()=>i,x:()=>c});var t=o(6540);const r={},n=t.createContext(r);function i(e){const a=t.useContext(n);return t.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function c(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(n.Provider,{value:a},e.children)}}}]);