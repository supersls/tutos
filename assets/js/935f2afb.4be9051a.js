"use strict";(self.webpackChunktutos=self.webpackChunktutos||[]).push([[8581],{5610:a=>{a.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"category","label":"crafsmanChip","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"clean-code","href":"/tutos/docs/craftsmanChip/clean-code","docId":"craftsmanChip/clean-code","unlisted":false},{"type":"link","label":"gitflow","href":"/tutos/docs/craftsmanChip/gitflow","docId":"craftsmanChip/gitflow","unlisted":false}],"href":"/tutos/docs/category/crafsmanchip"},{"type":"link","label":"Tutorial Intro","href":"/tutos/docs/intro","docId":"intro","unlisted":false},{"type":"category","label":"Java","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"JEE","href":"/tutos/docs/java/JEE","docId":"java/JEE","unlisted":false},{"type":"link","label":"ThreadDeadLock","href":"/tutos/docs/java/ThreadDeadLock","docId":"java/ThreadDeadLock","unlisted":false},{"type":"link","label":"appLifeCycle","href":"/tutos/docs/java/appLifeCycle","docId":"java/appLifeCycle","unlisted":false},{"type":"link","label":"collections","href":"/tutos/docs/java/collections","docId":"java/collections","unlisted":false},{"type":"link","label":"failfirst","href":"/tutos/docs/java/failfirst","docId":"java/failfirst","unlisted":false},{"type":"link","label":"futures","href":"/tutos/docs/java/futures","docId":"java/futures","unlisted":false},{"type":"link","label":"gc","href":"/tutos/docs/java/gc","docId":"java/gc","unlisted":false},{"type":"link","label":"gradle","href":"/tutos/docs/java/gradle","docId":"java/gradle","unlisted":false},{"type":"link","label":"hashcode-equals","href":"/tutos/docs/java/hashcode-equals","docId":"java/hashcode-equals","unlisted":false},{"type":"link","label":"hashmap","href":"/tutos/docs/java/hashmap","docId":"java/hashmap","unlisted":false},{"type":"link","label":"hashset","href":"/tutos/docs/java/hashset","docId":"java/hashset","unlisted":false},{"type":"link","label":"java_memory","href":"/tutos/docs/java/java_memory","docId":"java/java_memory","unlisted":false},{"type":"link","label":"jvm","href":"/tutos/docs/java/jvm","docId":"java/jvm","unlisted":false},{"type":"link","label":"log4j","href":"/tutos/docs/java/log4j","docId":"java/log4j","unlisted":false},{"type":"link","label":"principales","href":"/tutos/docs/java/principales","docId":"java/principales","unlisted":false},{"type":"link","label":"streams","href":"/tutos/docs/java/streams","docId":"java/streams","unlisted":false},{"type":"link","label":"tests","href":"/tutos/docs/java/tests","docId":"java/tests","unlisted":false},{"type":"link","label":"threadLock","href":"/tutos/docs/java/threadLock","docId":"java/threadLock","unlisted":false},{"type":"link","label":"threads","href":"/tutos/docs/java/threads","docId":"java/threads","unlisted":false}],"href":"/tutos/docs/category/java"},{"type":"category","label":"Spring","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"spring-data-jdbc","href":"/tutos/docs/spring/spring-data-jdbc","docId":"spring/spring-data-jdbc","unlisted":false},{"type":"link","label":"spring-data-jpa","href":"/tutos/docs/spring/spring-data-jpa","docId":"spring/spring-data-jpa","unlisted":false},{"type":"link","label":"spring-security-jwt","href":"/tutos/docs/spring/spring-security-jwt","docId":"spring/spring-security-jwt","unlisted":false}],"href":"/tutos/docs/category/spring"},{"type":"category","label":"Architecture","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"DDD","href":"/tutos/docs/archi/DDD","docId":"archi/DDD","unlisted":false},{"type":"link","label":"Microservices","href":"/tutos/docs/archi/Microservices","docId":"archi/Microservices","unlisted":false},{"type":"link","label":"archi","href":"/tutos/docs/archi/","docId":"archi/archi","unlisted":false},{"type":"link","label":"auths","href":"/tutos/docs/archi/auths","docId":"archi/auths","unlisted":false},{"type":"link","label":"hexagonal","href":"/tutos/docs/archi/hexagonal","docId":"archi/hexagonal","unlisted":false},{"type":"link","label":"rest","href":"/tutos/docs/archi/rest","docId":"archi/rest","unlisted":false}],"href":"/tutos/docs/category/architecture"},{"type":"category","label":"databases","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"nosql","href":"/tutos/docs/databases/nosql","docId":"databases/nosql","unlisted":false}]}]},"docs":{"archi/archi":{"id":"archi/archi","title":"archi","description":"Java application architectures can vary greatly depending on the requirements, scale, and complexity of the application. Here are some of the top Java application architectures commonly used:","sidebar":"tutorialSidebar"},"archi/auths":{"id":"archi/auths","title":"auths","description":"There are several well-known application authentication types used to secure access to software applications:","sidebar":"tutorialSidebar"},"archi/DDD":{"id":"archi/DDD","title":"DDD","description":"Domain-Driven Design (DDD) is an architectural approach that emphasizes the importance of the domain model within a software application. It focuses on understanding and modeling the business domain, capturing its complexity, and mapping it to the software implementation effectively. Here\'s a simplified example of Domain-Driven Design in a Java application:","sidebar":"tutorialSidebar"},"archi/hexagonal":{"id":"archi/hexagonal","title":"hexagonal","description":"Hexagonal Architecture, also known as Ports and Adapters, is an architectural pattern introduced by Alistair Cockburn in the early 2000s. It is designed to create loosely coupled systems that are easy to maintain, test, and evolve. The core idea behind Hexagonal Architecture is to separate the application\'s core logic (business logic or domain logic) from external concerns such as user interfaces, databases, and external services.","sidebar":"tutorialSidebar"},"archi/Microservices":{"id":"archi/Microservices","title":"Microservices","description":"Java microservices architecture is a design approach where an application is structured as a collection of small, loosely coupled, and independently deployable services. Each service is focused on a specific business capability and communicates with other services through lightweight protocols like HTTP/REST or messaging queues.","sidebar":"tutorialSidebar"},"archi/rest":{"id":"archi/rest","title":"rest","description":"Here are some best practices to consider when designing and implementing a REST API:","sidebar":"tutorialSidebar"},"craftsmanChip/clean-code":{"id":"craftsmanChip/clean-code","title":"clean-code","description":"Writing clean code is essential for maintainability, readability, and collaboration within a software project. Clean code is easy to understand, easy to change, and easy to extend. Here are some principles and examples of clean code in Java:","sidebar":"tutorialSidebar"},"craftsmanChip/gitflow":{"id":"craftsmanChip/gitflow","title":"gitflow","description":"The Gitflow model is a popular branching strategy used in software development projects, including Java applications. It provides a structured approach to managing code changes, releases, and collaboration among team members. Here\'s how you can adapt the Gitflow model for Java projects:","sidebar":"tutorialSidebar"},"databases/nosql":{"id":"databases/nosql","title":"nosql","description":"NoSQL databases are a category of databases that provide mechanisms for storage and retrieval of data models other than the tabular relations used in relational databases. They are designed to handle large volumes of data, support flexible schemas, and provide horizontal scalability. Here are some key principles of NoSQL databases:","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Tutorial Intro","description":"Let\'s discover Docusaurus in less than 5 minutes.","sidebar":"tutorialSidebar"},"java/appLifeCycle":{"id":"java/appLifeCycle","title":"appLifeCycle","description":"In Java application development, various tools and frameworks support different stages of the application lifecycle, from development to deployment and monitoring. Here\'s a list of some popular tools and frameworks used across different phases of the Java application lifecycle:","sidebar":"tutorialSidebar"},"java/collections":{"id":"java/collections","title":"collections","description":"Java Collections Framework provides a set of interfaces and classes to represent and manipulate collections of objects. It includes various data structures like Lists, Sets, Maps, Queues, etc., along with algorithms to manipulate them efficiently. Here are some key interfaces and classes in the Java Collections Framework:","sidebar":"tutorialSidebar"},"java/failfirst":{"id":"java/failfirst","title":"failfirst","description":"In Java, the \\"fail first\\" principle is a programming approach that emphasizes handling error conditions or exceptional cases at the beginning of a method or program flow, rather than burying them within the code. This approach helps to make code more robust, readable, and maintainable by addressing potential issues early on.","sidebar":"tutorialSidebar"},"java/futures":{"id":"java/futures","title":"futures","description":"Java CompletableFuture is a class introduced in Java 8 to represent a future result of an asynchronous computation. It provides a way to write non-blocking asynchronous code in a more readable and maintainable way. Here are some examples of using CompletableFuture in Java:","sidebar":"tutorialSidebar"},"java/gc":{"id":"java/gc","title":"gc","description":"Java\'s garbage collector (GC) is a critical component of the Java Virtual Machine (JVM) responsible for automatically managing memory allocation and deallocation in Java applications. Here\'s an overview of how the Java garbage collector works:","sidebar":"tutorialSidebar"},"java/gradle":{"id":"java/gradle","title":"gradle","description":"In Gradle, packaging refers to the process of bundling your Java application, along with its dependencies and resources, into a distributable format, such as a JAR (Java Archive) or a WAR (Web Archive) file. Gradle offers powerful capabilities for packaging Java projects efficiently. Here are the basic steps for packaging a Java project with Gradle:","sidebar":"tutorialSidebar"},"java/hashcode-equals":{"id":"java/hashcode-equals","title":"hashcode-equals","description":"In Java, hashCode() and equals() are methods defined in the Object class, which is the root class for all Java classes. They are crucial for proper functioning in collections like HashMap, HashSet, Hashtable, etc. Understanding their rules and implementing them correctly is essential for designing effective Java classes.","sidebar":"tutorialSidebar"},"java/hashmap":{"id":"java/hashmap","title":"hashmap","description":"Sure, here\'s the explanation formatted in Markdown:","sidebar":"tutorialSidebar"},"java/hashset":{"id":"java/hashset","title":"hashset","description":"Certainly! Below is an explanation of the HashSet implementation in Java, formatted in Markdown:","sidebar":"tutorialSidebar"},"java/java_memory":{"id":"java/java_memory","title":"java_memory","description":"Java Heap Space and Java Stack Space are two distinct memory areas in the Java Virtual Machine (JVM) with different purposes and characteristics:","sidebar":"tutorialSidebar"},"java/JEE":{"id":"java/JEE","title":"JEE","description":"Java EE (Enterprise Edition) is a set of specifications that define standards for building enterprise-level applications in Java. These specifications provide a framework for developing scalable, secure, and portable applications. Here are some key Java EE specifications:","sidebar":"tutorialSidebar"},"java/jvm":{"id":"java/jvm","title":"jvm","description":"The Java Virtual Machine (JVM) is an essential component of the Java platform, responsible for executing Java bytecode. Here\'s an overview of how the Java JVM works:","sidebar":"tutorialSidebar"},"java/log4j":{"id":"java/log4j","title":"log4j","description":"Log4j is a logging library for Java applications that allows developers to log messages across various levels of severity, manage logging configurations, and control the output destination of log messages. Here\'s how Log4j works:","sidebar":"tutorialSidebar"},"java/principales":{"id":"java/principales","title":"principales","description":"Java coding principles refer to guidelines, practices, and concepts that developers should follow to write clean, efficient, maintainable, and reliable Java code. These principles help ensure code quality, readability, and scalability while reducing bugs and technical debt. Here are some key Java coding principles:","sidebar":"tutorialSidebar"},"java/streams":{"id":"java/streams","title":"streams","description":"Java Stream API, introduced in Java 8, provides a functional approach to processing collections of elements. It enables you to express complex data processing operations using a fluent and declarative syntax. Here are some examples demonstrating the use of Java Stream API:","sidebar":"tutorialSidebar"},"java/tests":{"id":"java/tests","title":"tests","description":"In Java application development, various types of tests are commonly used to ensure the quality, correctness, and reliability of the software. Here are some of the most common types of tests used in Java applications:","sidebar":"tutorialSidebar"},"java/ThreadDeadLock":{"id":"java/ThreadDeadLock","title":"ThreadDeadLock","description":"A deadlock in Java occurs when two or more threads are blocked forever, each waiting for the other to release a resource that it holds. Here\'s a simple example of a deadlock scenario:","sidebar":"tutorialSidebar"},"java/threadLock":{"id":"java/threadLock","title":"threadLock","description":"Sure, let\'s create a simple Java example that demonstrates thread locking using the synchronized keyword.","sidebar":"tutorialSidebar"},"java/threads":{"id":"java/threads","title":"threads","description":"Threads in Java allow concurrent execution of tasks, enabling applications to perform multiple operations simultaneously. Each thread represents a separate flow of control within a program. Here\'s an explanation of Java threads with examples:","sidebar":"tutorialSidebar"},"spring/spring-data-jdbc":{"id":"spring/spring-data-jdbc","title":"spring-data-jdbc","description":"Certainly! Below is a basic example of using Spring Data JDBC, formatted in Markdown:","sidebar":"tutorialSidebar"},"spring/spring-data-jpa":{"id":"spring/spring-data-jpa","title":"spring-data-jpa","description":"Certainly! Here\'s a basic example of using Spring Data JPA, formatted in Markdown:","sidebar":"tutorialSidebar"},"spring/spring-security-jwt":{"id":"spring/spring-security-jwt","title":"spring-security-jwt","description":"Spring Security offers extensive support for integrating JSON Web Tokens (JWT) into your application for authentication and authorization purposes. Here\'s a basic example of using JWT with Spring Security:","sidebar":"tutorialSidebar"}}}')}}]);